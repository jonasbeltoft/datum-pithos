@using BlazorApp.Services
@if (measurements == null)
{
	<div class="flex-grow flex justify-center w-[85svw] max-w-[calc(100svw-20rem)]">

		@if (fetchErr == null)
		{
			<div class="loader"></div>
		}
		else
		{
			<span class="text-sm text-red-500">@fetchErr</span>
		}

	</div>
}
else if (measurements.entries.Count() == 0)
{
	<div class="flex-grow flex justify-center mt-16">
		<span class="text-sm text-zinc-500">Ingen målinger fundet.</span>
	</div>
}
else
{
	<div class="overflow-auto self-center max-w-full border rounded-lg">
		<table class="table-row text-sm">
			<thead class="sticky top-0 bg-white border-b">
				<tr class="text-left align-top">
					<th class="p-4 border-r last-of-type:border-none">
						<span class="font-semibold mr-1">Time</span>
					</th>
					@foreach (var entry in measurements.headers)
					{
						<th class="p-4 border-r last-of-type:border-none">
							<span class="font-semibold mr-1">@entry.name</span>
							<span class="text-sm font-normal text-zinc-500">@entry.unit</span>
						</th>
					}
				</tr>
			</thead>
			<tbody>
				@for (int i = 0; i < measurements.entries.Count(); i++)
				{
					int entry_index = i;
					<tr
						class="border-b transition-colors odd:bg-zinc-100/50 hover:bg-zinc-200 hover:border-zinc-200 *:hover:border-zinc-50 data-[state=selected]:bg-muted last-of-type:border-none">
						<td
							class="max-w-[21ch] text-ellipsis overflow-hidden whitespace-nowrap border-r last-of-type:border-none">
							<input
								class="m-2 p-2 w-[calc(100%-1rem)] ring-zinc-900 focus:outline-none rounded-md border-input bg-transparent text-sm ring-offset-background placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30"
								placeholder="..." type="datetime-local"
								value="@DateTimeOffset.FromUnixTimeSeconds(measurements.entries[i].CreatedAt).ToLocalTime().ToString("yyyy-MM-dd HH:mm")"
								@onchange="@((ChangeEventArgs args) => TimeValueChangedAsync(args, entry_index))">
						</td>
						@for (int j = 0; j < measurements.headers.Count(); j++)
						{

							int value_index = j;
							<td
								class="max-w-[15ch] w-fit text-ellipsis overflow-hidden whitespace-nowrap border-r last-of-type:border-none">
								<input
									class="m-2 p-2 w-[calc(100%-1rem)] ring-zinc-900 focus:outline-none rounded-md border-input bg-transparent text-sm ring-offset-background placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30
																																											@(inputErrors.TryGetValue((entry_index, value_index), out var err) && err ? "ring-2 !ring-red-500" : "")"
									placeholder="..." type="text" value="@GetValue(entry_index, value_index)"
									@onchange="@((ChangeEventArgs args) => ValueChangedAsync(args, entry_index, value_index))" />
							</td>
						}
					</tr>
				}
			</tbody>
		</table>
	</div>
}

@code {
	[Parameter]
	public int? collectionId { get; set; }
	private int? lastMeasurementId;

	[Parameter]
	public EventCallback RefreshParent { get; set; }

	[Inject]
	public MeasurementService MeasurementService { get; set; } = default!;
	public MeasurementCollection? measurements { get; set; } = null;
	private string? fetchErr = null;
	Dictionary<(int entryIndex, int valueIndex), bool> inputErrors = new();

	public string? globalErr = null;

	public string GetValue(int entry_index, int value_index)
	{
		if (measurements == null || measurements.entries.Count() == 0)
			return string.Empty;
		var attrId = measurements.headers[value_index].Id;
		return measurements.entries[entry_index].values.FirstOrDefault(v => v.Id == attrId)?.value ?? "";
	}

	public async Task RefreshState(string? searchString = null)
	{
		// REFRESH THE DATA
		if (searchString != null)
		{
			// Handle search string if needed
		}
		await FetchMeasurements();
		StateHasChanged();
	}

	protected async override Task OnParametersSetAsync()
	{
		// FETCH THE INITIAL DATA only if id changes
		if (collectionId.HasValue && collectionId != lastMeasurementId)
		{
			lastMeasurementId = collectionId;
			await FetchMeasurements();
			StateHasChanged();
		}
	}

	private async void TimeValueChangedAsync(ChangeEventArgs args, int entry_index) //
	{
		var format = "yyyy-MM-ddTHH:mm:ss";
		try
		{
			Console.WriteLine(args.Value);
			var time = DateTimeOffset.ParseExact(args.Value?.ToString() ?? "", format, null).ToUnixTimeSeconds();
			measurements!.entries[entry_index].CreatedAt = time;

			// UPDATE VALUE

		}
		catch (FormatException)
		{
			// Handle invalid format

			Console.WriteLine($"Invalid date format. Expected format: {format}");
			return;
		}

	}

	private async void ValueChangedAsync(ChangeEventArgs args, int entry_index, int value_index) //
	{
		var attrId = measurements!.headers[value_index].Id;
		var elem = measurements.entries[entry_index].values.FirstOrDefault(v => v.Id == attrId);

		if (elem != null)
		{
			elem.value = args.Value?.ToString() ?? "";
		}

		// UPDATE VALUE
		var result = await MeasurementService.UpdateMeasurementAsync(measurements!.entries[entry_index].Id,
		attrId, args.Value?.ToString() ?? "");
		inputErrors[(entry_index, value_index)] = !result;
		if (inputErrors.Any(e => e.Value))
		{
			globalErr = "Der skete en fejl under opdatering af målinger.";
		}
		else
		{
			globalErr = null;
		}
		await RefreshParent.InvokeAsync();
		StateHasChanged();
	}

	private async Task FetchMeasurements(string? searchString = null)
	{

		measurements = null;
		// HTTP CALL
		var result = await MeasurementService.FetchMeasurementsAsync(collectionId!.Value);
		if (result == null)
		{
			// Handle error
			fetchErr = "Der skete en fejl under hentning af målinger.";
			return;
		}
		fetchErr = null;

		measurements = result;

		// Notify parent component of success
		await RefreshParent.InvokeAsync();
	}

}
