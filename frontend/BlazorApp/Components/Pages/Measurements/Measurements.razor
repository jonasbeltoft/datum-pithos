@page "/measurements/{MeasurementId}"
@using BlazorApp.Services
@layout MeasurementsLayout
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="h-full flex flex-col items-center max-w-full">
	<div class="flex flex-col flex-grow h-1 max-w-full">

		<div class="flex flex-col self-start">
			<h1 class="text-3xl font-bold mb-1">@Collection.Name</h1>

			<p class="mb-3 text-sm text-zinc-500">@Collection.Description</p>
		</div>
		<input
			class="mb-2 ring-zinc-900 focus:outline-none inline-flex h-10 w-96 rounded-md border border-input bg-zinc-200 px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30 md:text-sm"
			placeholder="Søg..." type="text" disabled=@(isSearchDisabled) @bind="SearchString" @bind:event="oninput">
		@* <MeasurementsTable FilteredMeasurements="FMeasurements" measurementId="MeasurementIdInt"></MeasurementsTable> *@
		@if (MeasurementIdInt > 0)
		{
			<MeasurementsTable OnFetchSuccess=@EnableSearch measurementId="MeasurementIdInt"></MeasurementsTable>
		}
	</div>
</div>

@code {
	[Parameter]
	public string? MeasurementId { get; set; }

	public Collection Collection { get; set; } = new Collection();

	private string? SearchString { get; set; }

	public int MeasurementIdInt = -1;
	private bool isSearchDisabled = true;

	[Inject]
	private NavigationManager Navigation { get; set; } = default!;

	[Inject]
	private MeasurementService MeasurementService { get; set; } = default!;

	public void EnableSearch(bool success)
	{
		isSearchDisabled = !success;
	}
	protected async override Task OnParametersSetAsync()
	{
		if (!int.TryParse(MeasurementId, out MeasurementIdInt) ||
		MeasurementService.GetCollectionIds().Contains(MeasurementIdInt) == false)
		{
			Navigation.NavigateTo("/measurements");
			return;
		}
		Collection = MeasurementService.GetCollectionById(MeasurementIdInt);
	}

	protected override async Task OnInitializedAsync()
	{

		if (!int.TryParse(MeasurementId, out MeasurementIdInt) ||
		MeasurementService.GetCollectionIds().Contains(MeasurementIdInt) == false)
		{
			Navigation.NavigateTo("/measurements");
			return;
		}
		Collection = MeasurementService.GetCollectionById(MeasurementIdInt);
	}
}
