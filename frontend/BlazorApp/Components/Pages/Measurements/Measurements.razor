@page "/measurements/{CollectionId}"
@using BlazorApp.Services
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@layout MeasurementsLayout
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@if (Collection != null)
{
	<div class="h-full flex flex-col max-w-full">
		<div class="flex flex-col flex-grow h-1 max-w-full">

			<div class="flex flex-col self-start mb-4">
				<h1 class="text-3xl font-bold mb-1">@Collection.Name</h1>
				<p class="text-sm text-zinc-500">@Collection.Description</p>
			</div>
			<div class="flex flex-row items-center gap-2 w-full h-10 mb-2">
				<button
					class="ring-zinc-900 inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-zinc-900 text-white hover:bg-primary/90 h-10 px-4 py-2"
					@onclick="async () => await AddMeasurement()">
					@if (!addingMeasurement)
					{
						<span>Indsæt ny måling</span>
					}
					else
					{
						<div role="status">
							<svg aria-hidden="true"
								class="inline w-6 h-6 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300"
								viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path
									d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
									fill="currentColor" />
								<path
									d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
									fill="currentFill" />
							</svg>
							<span class="sr-only">Loading...</span>
						</div>
					}
				</button>
				@* @onclick="async () => await AddAttribute()" *@
				<button
					class="ring-zinc-900 inline-flex items-center justify-center gap-2 whitespace-nowrap focus:outline-offset-4 rounded-md text-sm font-medium ring-offset-background transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 border border-input bg-white hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 mt-2 sm:mt-0"
					@onclick="async () => ShowAttributeModal()">
					@if (!addingAttribute)
					{
						<span>Tilføj kolonne</span>
					}
					else
					{
						<div role="status">
							<svg aria-hidden="true"
								class="inline w-6 h-6 text-gray-200 animate-spin dark:text-gray-600 fill-gray-600 dark:fill-gray-300"
								viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path
									d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
									fill="currentColor" />
								<path
									d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
									fill="currentFill" />
							</svg>
							<span class="sr-only">Loading...</span>
						</div>
					}
				</button>

				@if (!string.IsNullOrEmpty(globalErr))
				{
					<div class="text-sm text-red-500 font-semibold">
						@globalErr
					</div>
				}

			</div>
			<div class="flex flex-row items-center gap-2 w-full h-10 mb-2">
				<input
					class="ring-zinc-900 min-w-[286px] focus:outline-none inline-flex rounded-md border border-input bg-zinc-200 px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30 md:text-sm"
					placeholder="Søg..." type="text" disabled=@(isSearchDisabled) @bind="SearchString">

				<span class="inline-flex gap-2 items-center justify-start self-end">
					<div>
						<p class="text-sm text-black font-semibold">Fra</p>
						<input
							class="p-2 w-[20ch] min-w-9 ring-zinc-900 focus:outline-none rounded-md border border-input bg-transparent text-sm ring-offset-background placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30"
							placeholder="-" type="datetime-local"
							value="@(timeFrom != null ? DateTimeOffset.FromUnixTimeSeconds(timeFrom ?? 0).ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) : null)"
							@onchange="@((ChangeEventArgs args) => timeFrom = args.Value != null && args.Value?.ToString()?.Length != 0 ? DateTimeOffset.Parse(args.Value?.ToString()!).ToUnixTimeSeconds() : null)" />
					</div>
					<div>
						<p class="text-sm text-black font-semibold">Til</p>
						<input
							class="p-2 w-[20ch] min-w-9 ring-zinc-900 focus:outline-none rounded-md border border-input bg-transparent text-sm ring-offset-background placeholder:text-zinc-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-30"
							placeholder="-" type="datetime-local"
							value="@(timeTo != null ? DateTimeOffset.FromUnixTimeSeconds(timeTo ?? 0).ToLocalTime().ToString("yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture) : null)"
							@onchange="@((ChangeEventArgs args) => timeTo = args.Value != null && args.Value?.ToString()?.Length != 0 ? DateTimeOffset.Parse(args.Value?.ToString()!).ToUnixTimeSeconds() : null)" />
					</div>
				</span>
			</div>

			@* <MeasurementsTable FilteredMeasurements="FMeasurements" collectionId="CollectionIdInt"></MeasurementsTable> *@
			@if (CollectionIdInt > -1)
			{
				<MeasurementsTable @ref="childRef" timeFrom=@timeFrom timeTo=@timeTo searchString=@SearchString
					RefreshParent=@RefreshErr OnRowCountChanged="HandleCountChanged" collectionId="CollectionIdInt">
				</MeasurementsTable>
			}
		</div>
	</div>
	@if (AttributeModalVisible)
	{
		<div class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
			style="pointer-events: auto;"></div>
		<div
			class="@(UnitModalVisible ? "hidden" : "") fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg">
			<div class="flex flex-col space-y-2 text-center sm:text-left">
				<h2 id="radix-:r35:" class="text-lg font-semibold">Tilføj ny kolonne</h2>
			</div>
			<EditForm class="flex flex-col gap-2" Model="@AttributeModel" OnValidSubmit="@AddAttribute">
				<DataAnnotationsValidator />

				<!-- Name input -->
				<InputText @bind-Value="@AttributeModel.Name"
					class="ring-zinc-900 focus:outline-none inline-flex h-10 w-80 rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm"
					placeholder="Navn" />

				<div class="inline-flex gap-2">
					<!-- Unit dropdown -->
					<InputSelect @bind-Value="@AttributeModel.SelectedUnitId"
						class="ring-zinc-900 focus:outline-none inline-flex h-10 w-60 rounded-md border border-input bg-background px-3 py-2 text-base text-muted-foreground ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm">
						<option disabled selected value="">Vælg målings enhed</option>
						@foreach (var unit in MeasurementService.units)
						{
							<option value="@unit.Id">@unit.Name</option>
						}
					</InputSelect>
					<button type="button" @onclick="async () => ShowUnitModal()"
						class="inline-flex text-2xl items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-zinc-900 text-white hover:bg-primary/90 h-10 px-4 py-2">+</button>
				</div>

				<!-- Submit button -->
				<div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2">
					<!-- Validation -->
					<ValidationMessage For="@(() => AttributeModel.Name)"
						class="text-red-500 self-center text-sm font-medium leading-none" />
					<ValidationMessage For="@(() => AttributeModel.SelectedUnitId)"
						class="text-red-500 self-center text-sm font-medium leading-none" />
					@if (!string.IsNullOrEmpty(addAttributeErr))
					{
						<div class="text-red-500 self-center text-sm font-semibold">@addAttributeErr</div>
					}
					<button type="submit" @onclick="async () => HideAttributeModal()"
						class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 border border-input bg-white hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 mt-2 sm:mt-0">Afvis</button>
					<button type="submit"
						class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-zinc-900 text-white hover:bg-primary/90 h-10 px-4 py-2">Bekræft</button>
				</div>
			</EditForm>
		</div>
	}
	@if (UnitModalVisible)
	{
		<div
			class="fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg">
			<div class="flex flex-col space-y-2 text-center sm:text-left">
				<h2 id="radix-:r35:" class="text-lg font-semibold">Tilføj ny målings enhed</h2>
			</div>
			<EditForm class="flex flex-col gap-2" Model="@UnitModel" OnValidSubmit="@AddUnit">
				<DataAnnotationsValidator />

				<!-- Name input -->
				<InputText @bind-Value="@UnitModel.Name"
					class="ring-zinc-900 focus:outline-none inline-flex h-10 w-80 rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm"
					placeholder="Navn" />


				<!-- Submit button -->
				<div class="flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2">
					<!-- Validation -->
					<ValidationMessage For="@(() => UnitModel.Name)"
						class="text-red-500 self-center text-sm font-medium leading-none" />
					@if (!string.IsNullOrEmpty(addUnitErr))
					{
						<div class="text-red-500 self-center text-sm font-semibold">@addUnitErr</div>
					}
					<button type="submit" @onclick="async () => HideUnitModal()"
						class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 border border-input bg-white hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 mt-2 sm:mt-0">Afvis</button>
					<button type="submit"
						class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg]:size-4 [&amp;_svg]:shrink-0 bg-zinc-900 text-white hover:bg-primary/90 h-10 px-4 py-2">Bekræft</button>
				</div>

			</EditForm>
		</div>
	}
}

@code {
	[Parameter]
	public string? CollectionId { get; set; }

	public Collection Collection { get; set; } = new Collection();

	private string? SearchString { get; set; }

	public long? timeFrom { get; set; } = null;
	public long? timeTo { get; set; } = null;
	public int CollectionIdInt = -1;
	private bool isSearchDisabled = true;
	private bool addingMeasurement = false;
	private bool addingAttribute = false;

	[Inject]
	private NavigationManager Navigation { get; set; } = default!;

	[Inject]
	private MeasurementService MeasurementService { get; set; } = default!;
	private MeasurementsTable? childRef;

	private bool AttributeModalVisible { get; set; } = false;

	private bool UnitModalVisible { get; set; } = false;
	private string addAttributeErr { get; set; } = "";
	private string addUnitErr { get; set; } = "";

	private void HandleCountChanged(int count)
	{
		if (count > 0)
		{
			isSearchDisabled = false;
		}
		else
		{
			isSearchDisabled = true;
		}
	}

	private void ShowUnitModal()
	{
		UnitModalVisible = true;
	}
	private void HideUnitModal()
	{
		UnitModalVisible = false;
		UnitModel = new UnitFormModel();
		addUnitErr = string.Empty;
	}
	private void ShowAttributeModal()
	{
		AttributeModalVisible = true;
	}
	private void HideAttributeModal()
	{
		AttributeModalVisible = false;
		AttributeModel = new AttributeFormModel();
		addAttributeErr = string.Empty;
	}

	private AttributeFormModel AttributeModel = new();

	private string? globalErr = string.Empty;
	private void RefreshErr()
	{
		globalErr = childRef!.globalErr;
		StateHasChanged();
	}
	public async Task AddUnit()
	{
		var result = await MeasurementService.AddUnitAsync(UnitModel.Name);
		if (result)
		{
			// Refresh the measurements
			await MeasurementService.FetchUnitsAsync();
			HideUnitModal();
			StateHasChanged();
		}
		else
		{
			addUnitErr = "Der skete en fejl under tilføjelse af målings enhed.";
		}
	}

	public async Task AddAttribute()
	{
		addingAttribute = true;
		var result = await MeasurementService.AddAttributeAsync(CollectionIdInt, AttributeModel.Name,
		AttributeModel.SelectedUnitId);
		if (result)
		{
			// Refresh the measurements
			HideAttributeModal();
			await childRef!.RefreshState();
			StateHasChanged();
		}
		else
		{
			addAttributeErr = "Der skete en fejl under tilføjelse af kolonnen.";
		}
		addingAttribute = false;
	}
	public async Task AddMeasurement()
	{
		addingMeasurement = true;
		var result = await MeasurementService.AddMeasurementAsync(CollectionIdInt);
		if (result)
		{
			// Refresh the measurements
			await childRef!.RefreshState();
			StateHasChanged();
		}
		else
		{
			// Handle error
			Console.WriteLine("Error adding measurement.");
		}
		addingMeasurement = false;
	}
	private UnitFormModel UnitModel = new();

	protected async override Task OnParametersSetAsync()
	{
		bool result = int.TryParse(CollectionId, out CollectionIdInt);
		if (result && CollectionIdInt != -1)
		{
			// Wait until MeasurementService.collections is not empty
			while (MeasurementService.collections.Count() == 0)
			{
				if (MeasurementService.IsLoaded)
				{
					break;
				}
				await Task.Delay(100);
			}
			(Collection, var ok) = MeasurementService.GetCollectionById(CollectionIdInt);
			if (!ok)
			{
				Navigation.NavigateTo("/measurements");
				return;
			}

			StateHasChanged();
			return;
		}

		Navigation.NavigateTo("/measurements");
	}

	public class AttributeFormModel
	{
		[Required(ErrorMessage = "Navn er påkrævet")]
		[MaxLength(32, ErrorMessage = "Maksimal længde er 32 tegn")]
		public string Name { get; set; } = string.Empty;

		public int? SelectedUnitId { get; set; }
	}
	public class UnitFormModel
	{
		[Required(ErrorMessage = "Navn er påkrævet")]
		[MaxLength(32, ErrorMessage = "Maksimal længde er 32 tegn")]
		public string Name { get; set; } = string.Empty;
	}
}
